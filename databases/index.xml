<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Databases on self-salvation</title>
    <link>https://jinkes-li.github.io/databases/</link>
    <description>Recent content in Databases on self-salvation</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 25 Nov 2022 20:20:46 +0800</lastBuildDate><atom:link href="https://jinkes-li.github.io/databases/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>数据库DQL查询</title>
      <link>https://jinkes-li.github.io/databases/%E6%95%B0%E6%8D%AE%E5%BA%93dql%E6%9F%A5%E8%AF%A2/</link>
      <pubDate>Fri, 25 Nov 2022 20:20:46 +0800</pubDate>
      
      <guid>https://jinkes-li.github.io/databases/%E6%95%B0%E6%8D%AE%E5%BA%93dql%E6%9F%A5%E8%AF%A2/</guid>
      <description>MySQL数据库查询关键字 接下来会通过mysql的关键字来演示在数据库中如何对数据查询
mysql中的内置方法可以使用 &amp;lsquo;help function&amp;rsquo;来查看使用方式
常用的mysql 查询相关关键字 数据库查询（DQL）
-- 语法 select 字段列表 from 表名列表 where 条件列表 group by 分组字段列表 having 过滤列表 distinct 去重列表 order by 排序字段列表 limit 分页 regexp 正则匹配关键字 &amp;#34;&amp;#34;&amp;#34; DQL执行顺序 FROM -&amp;gt; WHERE -&amp;gt; GROUP BY -&amp;gt; SELECT -&amp;gt; ORDER BY -&amp;gt; LIMIT &amp;#34;&amp;#34;&amp;#34; 多表查询的两种方式 子查询 连表查询 基础查询 查询多个字段 -- 查询多个字段 select field1, field2.... from tablename; or select * from tablename; -- 设置别名 select field1 as a1, field2 as a2,.</description>
    </item>
    
    <item>
      <title>数据约束条件</title>
      <link>https://jinkes-li.github.io/databases/%E6%95%B0%E6%8D%AE%E7%BA%A6%E6%9D%9F%E6%9D%A1%E4%BB%B6/</link>
      <pubDate>Thu, 24 Nov 2022 21:24:31 +0800</pubDate>
      
      <guid>https://jinkes-li.github.io/databases/%E6%95%B0%E6%8D%AE%E7%BA%A6%E6%9D%9F%E6%9D%A1%E4%BB%B6/</guid>
      <description>MySQL字段约束条件 无符号， 零填充
非空
默认值
唯一值
主键
自增
外键
无符号，零填充
无符号，忽略数据中的正负符号关键字unsigned 零填充，数据未到数据位的情况下使用零填充
1. 验证零填充，查看数据345是否会被零填充 mysql&amp;gt; create table t1(id int unsigned, uid int(5) zerofill); Query OK, 0 rows affected (0.05 sec) mysql&amp;gt; insert into t1 values(123, 345); Query OK, 1 row affected (0.02 sec) mysql&amp;gt; select * from t1; +-----+-------+ | id | uid | +-----+-------+ | 123 | 00345 | +-----+-------+ 1 row in set (0.02 sec) mysql&amp;gt; 非空 not null MySQL数据库在不加约束条件的情况下字段的值是可以为空的</description>
    </item>
    
    <item>
      <title>SQL数据类型</title>
      <link>https://jinkes-li.github.io/databases/sql%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Wed, 23 Nov 2022 19:39:41 +0800</pubDate>
      
      <guid>https://jinkes-li.github.io/databases/sql%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</guid>
      <description>MySQL配置文件及常用语句 字符编码与配置文件
show status 可以使用show status查看系统运行的实时状态，便于做出相应优化，不可认为更改
show variables 查看系统参数，系统默认设置或者dba调整后的参数，静态的，可以通过set或者配置文件更改
MySQL字符相关
Mysql5.6之前版本的编码需要人为统一，之后的版本默认统一
5.6版本可以通过修改配置文件来永久修改编码配置
vim /etc/my.conf [mysqld] # 服务端 # add charcter-set-server=utf8mb4 collation-server=utf8mb4_general_ci [client] # 第三方客户端 default-character-set=utf8mb4 [mysql] # mysql自己的客户端 default-character-set=utf8mb4 上述更改为utf8mb4 可以支持表情，比utf8支持更多
数据库存储引擎 数据库正对数据采用的存储方式
# 查看常用的存储引擎 mysql&amp;gt; show engines; +--------------------+---------+----------------------------------------------------------------+--------------+------+------------+ | Engine | Support | Comment | Transactions | XA | Savepoints | +--------------------+---------+----------------------------------------------------------------+--------------+------+------------+ | InnoDB | DEFAULT | Supports transactions, row-level locking, and foreign keys | YES | YES | YES | | MRG_MYISAM | YES | Collection of identical MyISAM tables | NO | NO | NO | | MEMORY | YES | Hash based, stored in memory, useful for temporary tables | NO | NO | NO | | BLACKHOLE | YES | /dev/null storage engine (anything you write to it disappears) | NO | NO | NO | | MyISAM | YES | MyISAM storage engine | NO | NO | NO | | CSV | YES | CSV storage engine | NO | NO | NO | | ARCHIVE | YES | Archive storage engine | NO | NO | NO | | PERFORMANCE_SCHEMA | YES | Performance Schema | NO | NO | NO | | FEDERATED | NO | Federated MySQL storage engine | NULL | NULL | NULL | +--------------------+---------+----------------------------------------------------------------+--------------+------+------------+ 9 rows in set (0.</description>
    </item>
    
    <item>
      <title>数据库简单介绍及使用</title>
      <link>https://jinkes-li.github.io/databases/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D%E5%8F%8A%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Tue, 22 Nov 2022 16:58:20 +0800</pubDate>
      
      <guid>https://jinkes-li.github.io/databases/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D%E5%8F%8A%E4%BD%BF%E7%94%A8/</guid>
      <description>数据库的本质 数据库的分类 MySQL简介 MySQL基本使用 SQL与NoSQL 数据库相关概念 常见基本SQL语句 ####什么是数据 数据（data）是事实或观察的结果，是客观事物的逻辑归纳，是用于表示客观事物的未经过加工的的原始素材 数据可以是连续的值，比如声音，图像，称为模拟数据。也可以是离散的，如符号、文字，称为数字数据 在计算机系统中，数据以二进制信息单元0,1的形式表示
为什么不吧数据放入到word这些工具里？ 1.安全性 2.集群
####什么是数据库管理系统 DBMS（database management system） 1.管理数据 2.存储数据
####数据库的种类 1.关系型数据库（RDBMS）
典型产品：MySQL，Oracle，MSSQL（SQLserver）t-sql
表与表之间是由关联的（连表查询)
####菲关系型数据库（Nosql） 不使用SQL语句 json（key:value） MongoDB、Redis、elasticsearch
####关系型数据库与非关系型数据库功能对比 关系型和非关系型特点对比 关系型数据库（RDBMS）的特点：
1.二维表 2.典型产品Oracle传统企业，MySQL互联网企业 3.数据存取是通过SQL（Structured Query Language结构化查询语言） 4.最大特点数据安全性方面强（ACID） 非关系型数据库（NoSQL：Not only SQL）的特点：
1.不是否定关系型数据库，而是做关系型数据库的补充。 时代特点对比 web1.0时代 1.1 企业提供内容，用户浏览，所以关系型数据库够用，并发并不高，所以不需要nosql。 web2.0时代 2.1 核心是企业提供平台，用户参与提供内容，这个时代关系型数据库无法满足需求了。 2003NoSQL出现 3.1 memcache的诞生，关注的点是性能，但是针对安全性能关注比较低，随着安全性能需求不断提升，所以有了redis。 redis的特点 4.1 依然高性能高并发 4.2 数据持久化功能 4.3 支持多数据类型，主从复制和集群 4.4 管理不再使用SQL了 NoSQL的分类、特点、典型产品
1.键值（KV）存储：memcached、redis 2.列存储（column-oriented）：HBASE（新浪、360）Cassandra（200台服务器集群） 3.文档数据库（document-oriented）：MongoDB（最接近关系型数据库的NoSQL） 4.图形存储（Graph）：Neo4j 大版本 经典版本号 7 7.3.4 8i（internet） 8.</description>
    </item>
    
  </channel>
</rss>
