<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Databases on self-salvation</title>
    <link>https://jinkes-li.github.io/databases/</link>
    <description>Recent content in Databases on self-salvation</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 29 Nov 2022 23:30:45 +0800</lastBuildDate><atom:link href="https://jinkes-li.github.io/databases/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>数据库终章</title>
      <link>https://jinkes-li.github.io/databases/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%BB%88%E7%AB%A0/</link>
      <pubDate>Tue, 29 Nov 2022 23:30:45 +0800</pubDate>
      
      <guid>https://jinkes-li.github.io/databases/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%BB%88%E7%AB%A0/</guid>
      <description>MySQL终章 SQL注入问题 视图 触发器 存储过程 流程控制 内置函数 索引与慢查询优化 SQL注入 SQL(SQL injection)注入问题是早期利用SQL语言中的非法拼接和更改条件或操作数据,是发生在 Web 程序中数据库层的安全漏洞，是网站存在最多也是最简单的漏洞。 主要原因是程序对用户输入数据的合法性没有判断和处理，导致攻击者可以在 Web 应用程序中事先定义好的 SQL 语句中添加额外的 SQL 语句， 在管理员不知情的情况下实现非法操作，以此来实现欺骗数据库服务器执行非授权的任意查询，从而进一步获取到数据信息。
在python中如何方法SQL注入问题？ &amp;#34;&amp;#34;&amp;#34; 数据库中提前准备账户密码表 mysql&amp;gt; select * from userinfo; +----+--------+-----+ | id | name | pwd | +----+--------+-----+ | 1 | wesley | 123 | +----+--------+-----+ &amp;#34;&amp;#34;&amp;#34; import pymysql conn = pymysql.connect( host=&amp;#39;121.4.86.62&amp;#39;, port=3306, user=&amp;#39;root&amp;#39;, password=&amp;#39;Videojet2029@&amp;#39;, database=&amp;#39;db7&amp;#39;, charset=&amp;#39;utf8mb4&amp;#39;, autocommit=True ) cursor = conn.cursor(cursor=pymysql.cursors.DictCursor) username = input(&amp;#39;name&amp;gt;&amp;gt;: &amp;#39;) password = input(&amp;#39;pass&amp;gt;&amp;gt;: &amp;#39;) # 构建sql语句 sql = &amp;#34; select * from userinfo where name=&amp;#39;%s&amp;#39; and pwd=&amp;#39;%s&amp;#39; &amp;#34; % (username, password) print(sql) cursor.</description>
    </item>
    
    <item>
      <title>数据库多表联查</title>
      <link>https://jinkes-li.github.io/databases/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%9A%E8%A1%A8%E8%81%94%E6%9F%A5/</link>
      <pubDate>Mon, 28 Nov 2022 21:59:28 +0800</pubDate>
      
      <guid>https://jinkes-li.github.io/databases/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%9A%E8%A1%A8%E8%81%94%E6%9F%A5/</guid>
      <description>MySQL 多表联查及PySQL模块使用 多表查询的两种方式 /*原始数据 mysql&amp;gt; select * from emp1; +----+--------+--------+-----+--------+ | id | name | sex | age | dep_id | +----+--------+--------+-----+--------+ | 1 | jason | male | 18 | 200 | | 2 | dragon | female | 48 | 201 | | 3 | kevin | male | 18 | 201 | | 4 | nick | male | 28 | 202 | | 5 | owen | male | 18 | 203 | | 6 | jerry | female | 18 | 204 | +----+--------+--------+-----+--------+ 6 rows in set (0.</description>
    </item>
    
    <item>
      <title>第八周总结</title>
      <link>https://jinkes-li.github.io/databases/%E7%AC%AC%E5%85%AB%E5%91%A8%E6%80%BB%E7%BB%93/</link>
      <pubDate>Sun, 27 Nov 2022 17:27:41 +0800</pubDate>
      
      <guid>https://jinkes-li.github.io/databases/%E7%AC%AC%E5%85%AB%E5%91%A8%E6%80%BB%E7%BB%93/</guid>
      <description>进程相关 多进程实现TCP服务端并 # 如何使用多进程实现并发 1. 导入multiprocessing 下的Process模块 2. 创建进程对象并return对象，供其他函数调用 3. 定义一个用于接收客户端函数 4. 调用进程对象，并循环接搜客户端请求 5. 循环开设进程，使每个客户端请求进来都可以有进程处理 Server: import socket from multiprocessing import Process def get_server(): server = socket.socket() server.bind((&amp;#39;127.0.0.1&amp;#39;,8080)) server.listen(5) return server def get_talk(soke): while True: data = sock.recv(1024) print(data.decode(&amp;#39;utf8&amp;#39;)) sock.send(data.upper()) if __name__ == &amp;#39;__main__&amp;#39;: server = get_server() while True: sock, addr = server.accept() p = Process(targat=get_talk, args=(sock,)) p.start() 互斥锁概念 互斥锁主要是针对于线程，在计算机中线程数据太快，在并发状态下所有的线程都会操作数据，这样就会造成数据的错乱，所以出现了锁的概念，在一个进程抢到锁之后才可以对数据进行操作，其他线程只能等待，虽然这样降低了计算机处理数据的性能，但是保证了数据的安全性
如何加锁 在编程的过程中如何对代码添加锁，这一点需要结合具体业务，这里以12306举例，这种先查询然后再对数据做操作的业务，在对数据读取时不加锁，只有在对数据做操作时添加锁，接下来对这个业务进行简单的模拟
# 在Python代码中可以使用multiprocessing这个模块下的LOCK锁模块来实现数据加锁 # set_start_mothod 是更改python进程的启动模式，这里使用的是mac系统所以需要修改模式为fork from multiprocessing import Process, set_start_mothod, Lock import time import json import random # 用于模拟用户在购买票时的网络延迟 # 用户查看票 def search(name): with open(data.</description>
    </item>
    
    <item>
      <title>数据库DQL查询</title>
      <link>https://jinkes-li.github.io/databases/%E6%95%B0%E6%8D%AE%E5%BA%93dql%E6%9F%A5%E8%AF%A2/</link>
      <pubDate>Fri, 25 Nov 2022 20:20:46 +0800</pubDate>
      
      <guid>https://jinkes-li.github.io/databases/%E6%95%B0%E6%8D%AE%E5%BA%93dql%E6%9F%A5%E8%AF%A2/</guid>
      <description>MySQL数据库查询关键字 接下来会通过mysql的关键字来演示在数据库中如何对数据查询
mysql中的内置方法可以使用 &amp;lsquo;help function&amp;rsquo;来查看使用方式
常用的mysql 查询相关关键字 数据库查询（DQL）
-- 语法 select 字段列表 from 表名列表 where 条件列表 group by 分组字段列表 having 过滤列表 distinct 去重列表 order by 排序字段列表 limit 分页 regexp 正则匹配关键字 &amp;#34;&amp;#34;&amp;#34; DQL执行顺序 FROM -&amp;gt; WHERE -&amp;gt; GROUP BY -&amp;gt; SELECT -&amp;gt; ORDER BY -&amp;gt; LIMIT &amp;#34;&amp;#34;&amp;#34; 多表查询的两种方式 子查询 连表查询 基础查询 查询多个字段 -- 查询多个字段 select field1, field2.... from tablename; or select * from tablename; -- 设置别名 select field1 as a1, field2 as a2,.</description>
    </item>
    
    <item>
      <title>数据约束条件</title>
      <link>https://jinkes-li.github.io/databases/%E6%95%B0%E6%8D%AE%E7%BA%A6%E6%9D%9F%E6%9D%A1%E4%BB%B6/</link>
      <pubDate>Thu, 24 Nov 2022 21:24:31 +0800</pubDate>
      
      <guid>https://jinkes-li.github.io/databases/%E6%95%B0%E6%8D%AE%E7%BA%A6%E6%9D%9F%E6%9D%A1%E4%BB%B6/</guid>
      <description>MySQL字段约束条件 无符号， 零填充
非空
默认值
唯一值
主键
自增
外键
无符号，零填充
无符号，忽略数据中的正负符号关键字unsigned 零填充，数据未到数据位的情况下使用零填充
1. 验证零填充，查看数据345是否会被零填充 mysql&amp;gt; create table t1(id int unsigned, uid int(5) zerofill); Query OK, 0 rows affected (0.05 sec) mysql&amp;gt; insert into t1 values(123, 345); Query OK, 1 row affected (0.02 sec) mysql&amp;gt; select * from t1; +-----+-------+ | id | uid | +-----+-------+ | 123 | 00345 | +-----+-------+ 1 row in set (0.02 sec) mysql&amp;gt; 非空 not null MySQL数据库在不加约束条件的情况下字段的值是可以为空的</description>
    </item>
    
    <item>
      <title>SQL数据类型</title>
      <link>https://jinkes-li.github.io/databases/sql%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Wed, 23 Nov 2022 19:39:41 +0800</pubDate>
      
      <guid>https://jinkes-li.github.io/databases/sql%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</guid>
      <description>MySQL配置文件及常用语句 字符编码与配置文件
show status 可以使用show status查看系统运行的实时状态，便于做出相应优化，不可认为更改
show variables 查看系统参数，系统默认设置或者dba调整后的参数，静态的，可以通过set或者配置文件更改
MySQL字符相关
Mysql5.6之前版本的编码需要人为统一，之后的版本默认统一
5.6版本可以通过修改配置文件来永久修改编码配置
vim /etc/my.conf [mysqld] # 服务端 # add charcter-set-server=utf8mb4 collation-server=utf8mb4_general_ci [client] # 第三方客户端 default-character-set=utf8mb4 [mysql] # mysql自己的客户端 default-character-set=utf8mb4 上述更改为utf8mb4 可以支持表情，比utf8支持更多
数据库存储引擎 数据库正对数据采用的存储方式
# 查看常用的存储引擎 mysql&amp;gt; show engines; +--------------------+---------+----------------------------------------------------------------+--------------+------+------------+ | Engine | Support | Comment | Transactions | XA | Savepoints | +--------------------+---------+----------------------------------------------------------------+--------------+------+------------+ | InnoDB | DEFAULT | Supports transactions, row-level locking, and foreign keys | YES | YES | YES | | MRG_MYISAM | YES | Collection of identical MyISAM tables | NO | NO | NO | | MEMORY | YES | Hash based, stored in memory, useful for temporary tables | NO | NO | NO | | BLACKHOLE | YES | /dev/null storage engine (anything you write to it disappears) | NO | NO | NO | | MyISAM | YES | MyISAM storage engine | NO | NO | NO | | CSV | YES | CSV storage engine | NO | NO | NO | | ARCHIVE | YES | Archive storage engine | NO | NO | NO | | PERFORMANCE_SCHEMA | YES | Performance Schema | NO | NO | NO | | FEDERATED | NO | Federated MySQL storage engine | NULL | NULL | NULL | +--------------------+---------+----------------------------------------------------------------+--------------+------+------------+ 9 rows in set (0.</description>
    </item>
    
    <item>
      <title>数据库简单介绍及使用</title>
      <link>https://jinkes-li.github.io/databases/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D%E5%8F%8A%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Tue, 22 Nov 2022 16:58:20 +0800</pubDate>
      
      <guid>https://jinkes-li.github.io/databases/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D%E5%8F%8A%E4%BD%BF%E7%94%A8/</guid>
      <description>数据库的本质 数据库的分类 MySQL简介 MySQL基本使用 SQL与NoSQL 数据库相关概念 常见基本SQL语句 ####什么是数据 数据（data）是事实或观察的结果，是客观事物的逻辑归纳，是用于表示客观事物的未经过加工的的原始素材 数据可以是连续的值，比如声音，图像，称为模拟数据。也可以是离散的，如符号、文字，称为数字数据 在计算机系统中，数据以二进制信息单元0,1的形式表示
为什么不吧数据放入到word这些工具里？ 1.安全性 2.集群
####什么是数据库管理系统 DBMS（database management system） 1.管理数据 2.存储数据
####数据库的种类 1.关系型数据库（RDBMS）
典型产品：MySQL，Oracle，MSSQL（SQLserver）t-sql
表与表之间是由关联的（连表查询)
####菲关系型数据库（Nosql） 不使用SQL语句 json（key:value） MongoDB、Redis、elasticsearch
####关系型数据库与非关系型数据库功能对比 关系型和非关系型特点对比 关系型数据库（RDBMS）的特点：
1.二维表 2.典型产品Oracle传统企业，MySQL互联网企业 3.数据存取是通过SQL（Structured Query Language结构化查询语言） 4.最大特点数据安全性方面强（ACID） 非关系型数据库（NoSQL：Not only SQL）的特点：
1.不是否定关系型数据库，而是做关系型数据库的补充。 时代特点对比 web1.0时代 1.1 企业提供内容，用户浏览，所以关系型数据库够用，并发并不高，所以不需要nosql。 web2.0时代 2.1 核心是企业提供平台，用户参与提供内容，这个时代关系型数据库无法满足需求了。 2003NoSQL出现 3.1 memcache的诞生，关注的点是性能，但是针对安全性能关注比较低，随着安全性能需求不断提升，所以有了redis。 redis的特点 4.1 依然高性能高并发 4.2 数据持久化功能 4.3 支持多数据类型，主从复制和集群 4.4 管理不再使用SQL了 NoSQL的分类、特点、典型产品
1.键值（KV）存储：memcached、redis 2.列存储（column-oriented）：HBASE（新浪、360）Cassandra（200台服务器集群） 3.文档数据库（document-oriented）：MongoDB（最接近关系型数据库的NoSQL） 4.图形存储（Graph）：Neo4j 大版本 经典版本号 7 7.3.4 8i（internet） 8.</description>
    </item>
    
  </channel>
</rss>
