<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Pythons on self-salvation</title>
    <link>https://jinkes-li.github.io/python/</link>
    <description>Recent content in Pythons on self-salvation</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 09 Oct 2022 01:29:28 +0800</lastBuildDate><atom:link href="https://jinkes-li.github.io/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>文件操作方法</title>
      <link>https://jinkes-li.github.io/python/%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C%E6%96%B9%E6%B3%95/</link>
      <pubDate>Sun, 09 Oct 2022 01:29:28 +0800</pubDate>
      
      <guid>https://jinkes-li.github.io/python/%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C%E6%96%B9%E6%B3%95/</guid>
      <description>引言:
平时操作文件都是在计算机中直接新建或编辑文件，这种就类似操作系统直接给我们创建了一个快捷方式，可以直接对硬盘进行操作，今天这里介绍如何使用python代码来对一个文件进行操作
文件操作简介 定义： 文件就是操作系统提供的直接操作硬盘的快捷方式 文件的操作流程 创建或打开文件 编辑文件 保存文件 关闭文件 # Python代码操作文件的语法 # 方式一：（不推荐使用，需要写close来关闭打开的文件） l1 = open(&amp;#39;a.txt&amp;#39;, &amp;#39;r&amp;#39;, encoding=&amp;#39;utf8&amp;#39;) print(l1.read()) l1.close() # 方式二： （推荐使用，with会自动帮助我们关闭文件） with open(&amp;#39;a.txt&amp;#39;, &amp;#39;r&amp;#39;, encoding=&amp;#39;utf8&amp;#39;) as f: print(f.read()) &amp;#34;&amp;#34;&amp;#34; 注意： 如果对文件进行操作时使用到了反斜杠，如 &amp;#39;C：/admin/a.txt&amp;#39;，这里则需要使用&amp;#39;r&amp;#39;将反斜杠的特殊含义转义掉，仅仅作文一个源字符使用 &amp;#34;&amp;#34;&amp;#34; 文件的读写模式 r &amp;ndash; read 只读模式： 只能读不能写 w &amp;ndash; write 只写模式： 只能写不能读，需要注意如果不对光标进行操作。w操作会将原本文件中存在的数据全部覆盖 a &amp;ndash; append 只追加面膜是 ：只能在文件最后追加 read r 模式 read r 模式 # 如果文件不存在会直接报错 with open(r&amp;#39;a.txt&amp;#39;, &amp;#39;r&amp;#39;, encoding=&amp;#39;utf8&amp;#39;) as f: print(f.read()) write w 模式</description>
    </item>
    
    <item>
      <title>第二周总结</title>
      <link>https://jinkes-li.github.io/python/%E7%AC%AC%E4%BA%8C%E5%91%A8%E6%80%BB%E7%BB%93/</link>
      <pubDate>Fri, 07 Oct 2022 20:14:40 +0800</pubDate>
      
      <guid>https://jinkes-li.github.io/python/%E7%AC%AC%E4%BA%8C%E5%91%A8%E6%80%BB%E7%BB%93/</guid>
      <description>引言 本文对Python知识的的基础阶段整理归纳
基本数据类型 用户交互与格式化输出运算符 赋值方式 垃圾回收以及流程控制 For循环和数据类型方法 数据类型内置方法理论 数据类型和字符编码 基本数据类型 Python中不同的数据需要有不同的数据类型来表示，用于更好的读取和修改
1.1 布尔值（bool） 布尔值只有两个状态，True和Fales ，当数据为真时结果为True，数据为假时结果为Fales
注意： Python中有一些数据默认值就为False，比如 0 ，None， &amp;lsquo;&amp;rsquo;, {}, [], 这些数据类型如果 没有数据默认为False，除了这些其他基本都为True 一般我们也可以使用变量来定义布尔值，比较建议的名称为is开头。
1.2 字符串 （str） 字符串就是使用单引号或者双引号包含起来的字符就是字符串，字符串中都是文本数据，无法用于计算
1.3 整型 （int） 整型： 整型就是整数，如 0， 1 ，2 等，可用用于运算和条件判断
1.4 浮点型 （foalt） 浮点型： 浮点型就是小数，比如 3.14等
1.5 列表 （list） 列表: 列表是使用中括号包含起来的数据，并以逗号分隔，可以存放多种数据类型，列表是有序的，可以通过索引来取值
1.6 字典 （dict） 字典： 使用花括号括起来的数据，里面同样可以存放多种类型的数据，同时需要注意的是字典是以键值对来存放数据的，并且字典无序，只能通过键来取值
1.7 元组 （tople） 元组： 使用小括号包含起来的数据，数据可以是多种数据类型，元组索引对应的数据值不可以修改，但是如果这个数据值为列表或者字典等，其中列表或者字典的值是可以修改的，元组这里同样有索引的概念
1.8 集合 （set） 集合： 集合与字典一样同样使用花括号来定义，与之不同的是，字典存放数据需要以键值对的方式存放，集合中的数据使用逗号分隔，集合内存放的数据只能是不可变类型，并且在使用集合时，一般只应用于去重和关系运算
用户交互与格式化输出运算符 2.1 用户交互 用户交互就是让与计算机的交流通讯，让计算机理解我们需要做什么
# 关键字 1.</description>
    </item>
    
    <item>
      <title>数据类型和字符编码</title>
      <link>https://jinkes-li.github.io/python/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%92%8C%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81/</link>
      <pubDate>Fri, 30 Sep 2022 17:35:33 +0800</pubDate>
      
      <guid>https://jinkes-li.github.io/python/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%92%8C%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81/</guid>
      <description>python 数据类型操作 今日内容 字典相关操作 元组相关操作 集合相关操作 字符编码(理论) 字典操作 1. 类型转换，字典的转换一般不使用关键字，而是自己手动转 dict() 2. 字典需要掌握的操作 # 原始数据 user_dict = {&amp;#39;username&amp;#39;: &amp;#39;jason&amp;#39;, &amp;#39;password&amp;#39;: 123, &amp;#39;hobby&amp;#39;: [&amp;#39;read&amp;#39;, &amp;#39;music&amp;#39;, &amp;#39;run&amp;#39;] } 2.1 按key取值（不推荐使用，如果这个key不存在会报错） print(user_dict[&amp;#39;username&amp;#39;]) # username jason jason 2.2 使用内置方法get取值（推荐使用） 2.2.1 使用get获取已经存在的key值 print(user_dict.get(&amp;#39;username&amp;#39;)) jason 2.2.2 使用get获取不存在的值 print(user_dict.get(&amp;#39;age&amp;#39;)) None 2.2.3 使用get获取不存在的值，并通过第二个参数设定默认返回值 print(user_dict.get(&amp;#39;age&amp;#39;, &amp;#39;False&amp;#39;)) False 3.1 字典修改数据值，和列表的重新赋值类似 print(id(user_dict)) user_dict[&amp;#39;username&amp;#39;] = &amp;#39;wesley&amp;#39; print(id(user_dict), user_dict) 4337316352 # 从内存ID上看，字典是一个可变参数 4337316352 {&amp;#39;username&amp;#39;: &amp;#39;wesley&amp;#39;, &amp;#39;password&amp;#39;: 123, &amp;#39;hobby&amp;#39;: [&amp;#39;read&amp;#39;, &amp;#39;music&amp;#39;, &amp;#39;run&amp;#39;]} 3.2 如果修改的key并不存在，则会新建 user_dict[&amp;#39;age&amp;#39;] = 18 print(user_dict) {&amp;#39;username&amp;#39;: &amp;#39;jason&amp;#39;, &amp;#39;password&amp;#39;: 123, &amp;#39;hobby&amp;#39;: [&amp;#39;read&amp;#39;, &amp;#39;music&amp;#39;, &amp;#39;run&amp;#39;], &amp;#39;age&amp;#39;: 18} 3.</description>
    </item>
    
    <item>
      <title>Python数据类型内置方法理论</title>
      <link>https://jinkes-li.github.io/python/python%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%86%85%E7%BD%AE%E6%96%B9%E6%B3%95%E7%90%86%E8%AE%BA/</link>
      <pubDate>Thu, 29 Sep 2022 20:51:22 +0800</pubDate>
      
      <guid>https://jinkes-li.github.io/python/python%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%86%85%E7%BD%AE%E6%96%B9%E6%B3%95%E7%90%86%E8%AE%BA/</guid>
      <description>Python数据类型内置方法和理论 引言： Python自身对数字的敏感度比较低（精确度低） 如果是用在数据分析和金融量化方向，可以使用第三方包模块numpy
本文内容
数据类型内置方法理论 进制数转换 整型相关操作 浮点型相关操作 字符串相关操作 列表相关操作 数据类型内置方法理论 前面文章所提到的每一种数据类型本身都包含有一系列的操作方法，内置方法，是自身带的功能 Python中的数据类型调用内置方法的统一句式为: &amp;ldquo;.&amp;quot;:句点符 &amp;lsquo;wesley&amp;rsquo;.字符串的内置方法 str. 字符串内置方法 数据类型的内置方法比较的多，其中有一些经常使用的以及部分不经常使用的，需要在工作中使用，并且熟悉 进制数转化 开头前两位代表的是转换后表示的进制数 0b代表的是二进制 0o代表的是八进制 0x代表的是十六进制 # 代码实例 # 十进制转换其他进制 # 十转二 print(bin(100)) 0b1100100 # 十转八 print(oct(100)) 0o144 # 十转十六 print(hex(100)) 0x64 # 如果需要八进制转换成其他进制直接反打就可以了 # 二转十 print(int(0b1100100), 2) 100 2 # 八转十 print(int(0o144), 8) 100 8 # 十六转十 print(int(0x64), 16) 100 16 整型的相关操作 类型转换（可以将其他类型转换为整型） int(其他数据类型)，原始数据为浮点型可以直接转换，如果是字符串必须满足内部是纯数字才可以 # 代码实例 # str转int，注意字符串是不可变类型，这里需要重新赋值 a = &amp;#39;1111&amp;#39; a = int(a) print(type(a)) &amp;lt;class &amp;#39;int&amp;#39;&amp;gt; # float转int, 注意在float转int的时候int方法会将小数点后面的数据全部切除，而不是四舍五入，并且如果字符串中存在多个小数点，int无法识别并转换 a = 11.</description>
    </item>
    
    <item>
      <title>For循环和数据类型方法</title>
      <link>https://jinkes-li.github.io/python/for%E5%BE%AA%E7%8E%AF%E5%92%8C%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E6%96%B9%E6%B3%95/</link>
      <pubDate>Wed, 28 Sep 2022 18:58:47 +0800</pubDate>
      
      <guid>https://jinkes-li.github.io/python/for%E5%BE%AA%E7%8E%AF%E5%92%8C%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E6%96%B9%E6%B3%95/</guid>
      <description>while 循环补充说明 流程控制之for循环 while循环之死循环
真正的死循环一旦执行，cpu功耗会急剧上升 # 死循环 while True: i = 99 ** 99 print(i) while嵌套及全局标志位
注意： 一个break只能结束它所在的那一乘循环 注意：有几个while的嵌套，如果想一次性结束就应该写几个break 注意：如果不想反复的写break，可以使用全局标志位，就是在循环开始之初，定义一个变量为True，如果需要跳出while循环把这个变量赋值为False即可 is_flag = True # 这里定义一个全局标志位 while is_flag: # while的条件是如果is_flag = True就运行False就不运行 username = input(&amp;#39;username&amp;gt;&amp;gt;&amp;gt;:&amp;#39;) password = input(&amp;#39;password&amp;gt;&amp;gt;&amp;gt;:&amp;#39;) if username == &amp;#39;jason&amp;#39; and password == &amp;#39;123&amp;#39;: while is_flag: # 判断is_flag cmd = input(&amp;#39;请输入您的指令&amp;gt;&amp;gt;&amp;gt;:&amp;#39;) if cmd == &amp;#39;q&amp;#39;: # 这里判断我们输入的命令是什么，如果为q 直接将is_flag 从新赋值为False is_flag = False print(&amp;#39;正在执行您的指令:%s&amp;#39; % cmd) else: print(&amp;#39;用户名或密码错误&amp;#39;) 流程控制之for循环</description>
    </item>
    
    <item>
      <title>垃圾回收以及流程控制</title>
      <link>https://jinkes-li.github.io/python/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E4%BB%A5%E5%8F%8A%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/</link>
      <pubDate>Tue, 27 Sep 2022 22:10:23 +0800</pubDate>
      
      <guid>https://jinkes-li.github.io/python/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E4%BB%A5%E5%8F%8A%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/</guid>
      <description>Python垃圾回收以及流程控制 垃圾回收 流程控制理论 流程控制之分支结构 流程控制之循环结构 垃圾回收机制 在不分语言中，内存空间的申请和释放都需要程序员自己写代码才可以完成，但是Python这里不需要，有自身的垃圾回收机制自动管理
引用计数 引用计数，每一个变量值都有对应的计数值，每增加一个变量的引用，计数值则会加一，每减少一个引用计数值则会减一， 当引用值等于0时，就会触发垃圾回收机制 引用计数-原理图 标记清除 标记清除主要针对循环引用的问题 # 代码实例 l1 = [11, 22] # 引用计数1 l2 = [33, 44] # 引用计数1 # 循环引用 l1.append(l2) # l1 = [11, 22, [33, 44]] # 引用值为2 l2.append(l1) # l2 = [33, 44, [11, 22]] # 引用值为2 del l1 # 断开变量名l1与列表的绑定关系，引用值变更为1 del l2 # 断开变量名l2与列表的绑定关系，引用值变更为1 # 当内存占用到达临界值的时候，程序会自动停止，然后扫描程序中所有的数据，并给只产生循环引用的数据打上标记，之后一次性清除 标记清除-原理图
分代回收 用的越久的对象，被回收的可能性越小 请直接看原理图 分代原理图 流程控制理论 在编程的世界中下列三者会出现混合使用
Python代码中建议使用空格表示代码的从属关系，建议使用4个空格
从属关系：缩进的代码（子代码）是否执行取决于上层代码，并不是所有的代码都有子代码
如果多行子代码同属于一个父代码，那么这些子代码需要保持相同的缩进
当一行代码需要编写子代码时，必须以冒号结尾</description>
    </item>
    
    <item>
      <title>用户交互与格式化输出运算符</title>
      <link>https://jinkes-li.github.io/python/%E7%94%A8%E6%88%B7%E4%BA%A4%E4%BA%92%E4%B8%8E%E6%A0%BC%E5%BC%8F%E5%8C%96%E8%BE%93%E5%87%BA%E8%BF%90%E7%AE%97%E7%AC%A6/</link>
      <pubDate>Mon, 26 Sep 2022 21:25:44 +0800</pubDate>
      
      <guid>https://jinkes-li.github.io/python/%E7%94%A8%E6%88%B7%E4%BA%A4%E4%BA%92%E4%B8%8E%E6%A0%BC%E5%BC%8F%E5%8C%96%E8%BE%93%E5%87%BA%E8%BF%90%E7%AE%97%E7%AC%A6/</guid>
      <description>Python 本篇文章接着上一个文章继续介绍Python
Python基本的数据类型
与用户交互
格式化输出
基本运算符
多种赋值方式
逻辑运算符
成员运算符
身份运算符
1. Python基本数据类型 布尔值 （bool） 定义：用来判断事务的对错，是否可行，应用与流程控制中 布尔值只有两种状态 True 真的，可行的，对的 False 假的，不可行的，错的 Python中所有的数据都是自带布尔值的，自带布尔值的数据有下列两种 布尔值默认为False的数据有：0 None &amp;rsquo;&amp;rsquo; [] {} 布尔值默认为True的数据有：一般除了上面的都是True 布尔值的变量名一般推荐使用is开头 # 代码实例 is_boo1f = False is_boolt = True 小知识： 在企业中一般说的数据库数据伪删除使用的就是类似这种判断逻辑。
# 代码实例 # 一般企业提供的账号注销功能就是使用布尔值判断逻辑 # 比如下列表格中 is_delete 字段0代表着账户存在，字段1代表账户被删除，其实只是修改李程序取值的逻辑，并未删除实际数据 id	username	password phone is_delete 1 jason	123	110 1 2	kevin	321	120	0 # 一般这种方式大多应用于数据库中 元组（tuple） 定义： 小括号括起来 内部存放多个数据值 数据值与数据值之间逗号隔 开 数据值可以是任何数据类型 被称为不可变列表，是因为元组内存放的地址不能修改 # 代码实例 # 列表与元组的对比 # 列表使用[]进行定义 l1 = [11, 22, 33] # 定义一个列表并赋值给l1 l1[0] = 123 # 使用重复赋值将123替换到l1列表的0号索引 print(l1[0]) # 这里发现最终打印的123，而不是11，所以列表值是可变的 123 ​ 列表修改数据图表参考如下</description>
    </item>
    
    <item>
      <title>周末总结</title>
      <link>https://jinkes-li.github.io/python/%E5%91%A8%E6%9C%AB%E6%80%BB%E7%BB%93/</link>
      <pubDate>Sun, 25 Sep 2022 17:05:19 +0800</pubDate>
      
      <guid>https://jinkes-li.github.io/python/%E5%91%A8%E6%9C%AB%E6%80%BB%E7%BB%93/</guid>
      <description>周末总结 硬件总结 计算机基础知识 安装Pycharm 遇见Python Markdown文档编写 计算机基础硬件 CPU
控制器
调度计算机硬件之间的工作，相当于人类的大脑
运算器
在计算机中负责数学运算以及逻辑运算，同样相当于人类的大脑
存储
内存
基于电工作，内存将磁盘中的数据加载到自身于CPU交互，数据仅次于 CPU，但是断电未持久化的数据将会丢失
磁盘 将内存需要存储的数据，在磁盘中永久的存储下去
输入设备 计算机中的键盘鼠标，扫描仪等，都属于输入设备，是将外界信息录入计算机的一种设备
输出设备 将计算机中的数据输出的设备被称为输出设备，例如显示器，投影机等
计算机基础知识 路径 路径就是计算机中用来定位资源的路径，C:\user\admin\a.txt 这就是一个文件的路径
相对路径 相对路径就是具有参照物的路径，可以不用从根目录开始寻找 绝对路径 绝对路径就是需要从根路径开始寻找 环境变量 当系统需要寻找一个文件时会先寻找当前路径，如果当前路径寻找不到就	会寻找系统中的环境变量，环境变量相当于告诉计算机，如果这个文件找不	到就去环境变量的这个文件下寻找
进制
二进制 0 1 10 11 ，0和1 就是二进制用来表示高低电平，可以直接被计算机识别，二进制逢二进一 八进制 0 1 2 3 4 5 6 7 ，0到7就是八进制，逢八进一 十进制 0 1 2 3 4 5 6 7 8 9 ，0-9时十进制，逢十进一 十六进制 0 1 2 3 4 5 6 7 8 9 a b c d e f ，0 -f是十六进制，逢十六进一 单位换算</description>
    </item>
    
    <item>
      <title>遇见Python</title>
      <link>https://jinkes-li.github.io/python/%E9%81%87%E8%A7%81python/</link>
      <pubDate>Fri, 23 Sep 2022 19:12:39 +0800</pubDate>
      
      <guid>https://jinkes-li.github.io/python/%E9%81%87%E8%A7%81python/</guid>
      <description>遇见Python 引言：
接下来本文开始将在学习和工作中记录Python的使用
本文内容
Python语法-注释
关键字
变量与常量
​	变量与常量的基本使用
​	变量规范和命名规则
数据类型
​	整型（int）
​	浮点型（float）
​	字符串（str）
​	列表（list）
​	字典（dict）
PEP8规范
Python语法-注释
注释的意思就是被注释的代码不执行，参见下列示例
注释符号 # &amp;#39;&amp;#39;&amp;#39; &amp;#39;&amp;#39;&amp;#39; &amp;#34;&amp;#34;&amp;#34; &amp;#34;&amp;#34;&amp;#34; # 打印123 print(123) # 这一行是代码，代码后面也可以加注释 &amp;#39;&amp;#39;&amp;#39; 123 456 这是多行注释，被包含的内容都不执行 &amp;#39;&amp;#39;&amp;#39; &amp;#34;&amp;#34;&amp;#34; 666 这也是多行注释，被包含的内容都不执行 &amp;#34;&amp;#34;&amp;#34; 关键字 # 具有一定功能的特定单词，例如 print(&amp;#39;打印&amp;#39;) print(&amp;#39;123&amp;#39;) 123 # 查看数据类型 type() name = &amp;#39;wesley&amp;#39; print(type(name)) &amp;lt;class &amp;#39;str&amp;#39;&amp;gt; # 通过输出结果可以看出数据类型为str 也就是字符串 变量与常量
变量就是会变化的量，常量就是不会变化的量或者说长时间不会改变的量
​	变量：比如说我们的年龄会随着每年增涨，今年18，明年19，年龄在不断发生变化，这就是变量
​	常量：比如我们的身份证号码就属于常量，无论什么时间身份证号都不会发生变化，这就是常量
变量的命名规则和特性</description>
    </item>
    
    <item>
      <title>JetBrains IDE 产品使用</title>
      <link>https://jinkes-li.github.io/python/jetbrains-ide-%E4%BA%A7%E5%93%81%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Fri, 23 Sep 2022 19:03:58 +0800</pubDate>
      
      <guid>https://jinkes-li.github.io/python/jetbrains-ide-%E4%BA%A7%E5%93%81%E4%BD%BF%E7%94%A8/</guid>
      <description>JetBrains IDE 产品使用（Pycharm ） ​	引言：本文使用的系统为 MacOS 12.5 M1
接下来我们需要写Python相关的代码这里强烈推荐使用Pycharm，由于免费的社区版某些功能没有，这里我们使用Pycharm专业版（仅测试使用）
JetBrains官网 下载安装你需要的 IDE这里下载PyCharm，下载完成后直接双击安装 下载 Jetbrains.zip，下载后解压，得到 fineagent.jar，将该文件复制到 /Users/你的用户名/ 文件夹下
#使用cd进入到Users下面的你电脑的用户名下 wesley@wesleydeMacBook-Pro ⮀ ~ ⮀ cd /Users/wesley/ #将下载的fineagent.zip 复制到当前目录并解压，注意：我这里是吧fineagent.zip下载到了Downloads这个目录下，请以你的下载目录为准 wesley@wesleydeMacBook-Pro ⮀ ~ ⮀ cp /Users/wesley/Downloads/fineagent.zip ./ &amp;amp;&amp;amp; unzip fineagent.zip &amp;amp;&amp;amp; ll -rw-r--r--@ 1 wesley staff 35K Aug 15 10:21 fineagent.jar wesley@wesleydeMacBook-Pro ⮀ ~ ⮀ 打开访达，点击左侧的 应用程序 找到 PyCharm，在 PyCharm 图标上右键，点击 显示包内容
进入 Contents 目录，再进入 bin 目录，使用文本编辑器打开 pycharm.vmoptions文件
5.在最后面添加 -javaagent:/Users/你的用户名/fineagent.jar，记得修改一下你的用户名。
运行 PyCharm, 选择 Activate PyCharm，再点击 Activation Code</description>
    </item>
    
    <item>
      <title>基础和py解释器</title>
      <link>https://jinkes-li.github.io/python/%E5%9F%BA%E7%A1%80%E5%92%8Cpy%E8%A7%A3%E9%87%8A%E5%99%A8/</link>
      <pubDate>Thu, 22 Sep 2022 20:12:55 +0800</pubDate>
      
      <guid>https://jinkes-li.github.io/python/%E5%9F%BA%E7%A1%80%E5%92%8Cpy%E8%A7%A3%E9%87%8A%E5%99%A8/</guid>
      <description>引言：
​	继续接着上一个文章干活哈
本文内容： 计算机三大核心硬件部分详解 操作系统 编程与编程语言 编程语言的发展史 编程语言的分类 Python解释器 Python解释器多版本共存 计算机主要三核心硬件详解 CPU ​ 中央处理器（CPU），是电子计算机的主要设备之一，电脑中的核心配件。其功能主要是解释计算机指令以及处理计算机软件中的数据。CPU是计算机中负责读取指令，对指令译码并执行指令的核心部件。中央处理器主要包括两个部分，即控制器、运算器，其中还包括高速缓冲存储器及实现它们之间联系的数据、控制的总线。电子计算机三大核心部件就是CPU、内部存储器、输入/输出设备。中央处理器的功效主要为处理指令、执行操作、控制时间、处理数据。
存储器 ​	按信息的可保存性分类
​	非永久记忆的存储器：断电后信息即消失的存储器。
​	永久记忆性存储器：断电后仍能保存信息的存储器。
​	按在计算机系统中的作用分类
​	主存储器（内存）：用于存放活动的程序和数据，其速度高、容量较小、每位价位高。
​	辅助存储器（外存储器）：主要用于存放当前不活跃的程序和数据，其速度慢、容量大、每位价位低。
​	缓冲存储器：主要在两个不同工作速度的部件起缓冲作用。
输入设备 ​	输入设备是向计算机输入数据和信息的设备，是计算机与用户或其他设备通信的桥梁，是用户和计算机系统之间进行信息交换的主要装置之一。输入设备的任务是把数据、指令及某些标志信息等输送到计算机中去。键盘、鼠标、摄像头、扫描仪、光笔、手写输入板、游戏杆、语音输入装置等都属于输入设备（Input Device ），是人或外部与计算机进行交互的一种装置，用于把原始数据和处理这些数据的程序输入到计算机中。
输出设备 ​	输出设备（Output Device）是把计算或处理的结果或中间结果以人能识别的各种形式,如数字、符号、字母等表示出来,因此输入输出设备起了人与机器之间进行联系的作用。常见的有显示器、打印机、绘图仪、影像输出系统、语音输出系统、磁记录设备等。
操作系统 ​	计算机是一台机器，它按照用户的要求接收信息、存储数据、处理数据，然后再将处理结果输出（文字、图片、音频、视频等）。计算机由硬件和软件组成：
硬件是计算机赖以工作的实体，包括显示器、键盘、鼠标、硬盘、CPU、主板等； 软件会按照用户的要求协调整台计算机的工作，比如 Windows、Linux、Mac OS、Android 等操作系统，以及 Office、QQ、迅雷、微信等应用程序。 操作系统是软件的一部分，它是硬件基础上的第一层软件，是硬件和其它软件沟通的桥梁（或者说接口、中间人、中介等）。
编程与编程语言 编程 ​	指的是给计算机编定程序，使计算机能够完成我们需要的指令，得到相应的结果。这种人与计算机之间的交流过程就叫做编程。编程是一种逻辑的思维运算。
编程语言
编程语言（programming language）可以简单的理解为一种计算机和人都能识别的语言。一种计算机语言让程序员能够准确地定义计算机所需要使用的数据，并精确地定义在不同情况下所应当采取的行动。
编程语言的3大类 机器语言： 定义 优点 缺点 计算机直接识别的二进制代码 直接执行，速度快，资源占用少 可读性、可移植性差，编程繁杂 机器语言是直接可以被计算机认识的语言，无需经过翻译，每一操作码在计算机内部都有相应的电	路来完成它。
汇编语言： 定义 优点 缺点 汇编无法直接被机器直接识别需要汇编 编译阅读（相对机器语言），速度块，资源占用少 可读性、可移植性差，可维护性差 汇编语言具有更高的机器相关性，更加便于记忆和书写，但又同时保留了机器语言高速度和高效率的特点。汇编语言仍是面向机器的语言，很难从其代码上理解程序设计意图，设计出来的程序不易被移植，故不像其他大多数的高级计算机语言一样被广泛应用</description>
    </item>
    
  </channel>
</rss>
